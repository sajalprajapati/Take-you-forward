#include<bits/stdc++.h>
using namespace std;
class MyStack
{
  public:
  int capacity;
  int top;
  int *arr;

  MyStack(int x)
  {
    capacity=x;
    arr=new int[capacity];   
    top=-1;
  }
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //                     8       |________________|                                                                                                                                   //
  //                     7       |________________|                                                                                                                                  //
  //                     6       |________________|                                                                                                                                  //
  //                     5       |________________|                                                                                                                                   //
  //                     4       |________________|                                                                                                                                   //
  //                     3       |________________|                                                                                                                                   //
  //                     2       |________________|                                                                                                                                   //
  //                     1       |________________|                                                                                                                                   //
  //                     0       |________________|
  //                    |^|                  
  //                 indexinng                   <-----------------------top=-1                                                                                                                                   //                                                                                                                                                  //
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


  //this how we implement push operation.
  void push(int data)
 {
    if (top == capacity - 1) {
            cout << "\nStack overflow. Cannot push " << data;
            return;
        }
    top++;
    arr[top]=data;
  }

 //this how we implement pop operation.
 ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //                     8       |________________|                                                                                                                                   //
  //                     7       |________________|                                                                                                                                  //
  //                     6       |________________|                                                                                                                                  //
  //                     5       |________________|                                                                                                                                   //
  //                     4       |______20________|      <-----------------------top=4                                                                                                                               //
  //                     3       |______30 _______|                                                                                                                                   //
  //                     2       |______40________|                                                                                                                                   //
  //                     1       |______50________|                                                                                                                                   //
  //                     0       |______60________|
  //                    |^|                  
  //                 indexinng            
  //                                  res=arr[top]=20;
  
                                              
                                              
                                //                     8       |________________|                                                                                                                                   //
  //                     7       |________________|                                                                                                                                  //
  //                     6       |________________|                                                                                                                                  //
  //                     5       |________________|                                                                                                                                   //
  //                     4       |______20________|                                                                                                                                   //
  //                     3       |______30 _______|      <-----------------------top=3
  //                                                     top--;                                                                          //
  //                     2       |______40________|                                                                                                                                   //
  //                     1       |______50________|                                                                                                                                   //
  //                     0       |______60________|
  //                    |^|                  
  //                 indexinng            
  //                                                                                                                                                                                                                           //
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 int  pop()
 {
    if (top == -1) {
            cout << "\nStack underflow. Cannot pop";
            return -1;
        }
    int res=arr[top];
    top--;
    return res;
 }

 int  peek()
 {
   if (top == -1) {
            cout << "\nStack is empty. No top element";
            return -1;
        }
        return arr[top];
 }

 int size()
 {
    return top+1;
 }

 bool isEmpty()
 {
    return (top==-1);
 }
};

int main()
{
    MyStack s(10);
    cout<<"\n the stack is created ";
    s.push(10);
    s.push(20);
    s.push(30);
    cout<<"\n the size of the stack is "<<s.size();
    s.pop();
    s.push(35);
    cout<<"\n the top element is "<<s.peek();
    s.pop();
    s.pop();
    s.pop();
    s.pop();
    bool answer = s.isEmpty();
    cout << (answer ? "\nYes. The stack is empty" : "\nNo. The stack is not empty");


}